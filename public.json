{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Azure Standard Public API",
    "description": "The public API behind Azure's website",
    "contact": {
      "name": "Azure Standard Customer Service",
      "email": "info@azurestandard.com",
      "url": "https://azurestandard.com/customer-service"
    },
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  },
  "security": [
    {
      "basic": []
    },
    {
      "sessionCookie": []
    }
  ],
  "securityDefinitions": {
    "basic": {
      "type": "basic",
      "description": "Basic authentication (http://tools.ietf.org/html/rfc2617#section-2)"
    },
    "sessionCookie": {
      "type": "apiKey",
      "in": "header",
      "name": "cookie",
      "description": "Session cookie (http://tools.ietf.org/html/rfc6265)"
    }
  },
  "host": "api.azurestandard.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/drops": {
      "get": {
        "summary": "Returns all drops from the system that the user has access to",
        "operationId": "findDrops",
        "tags": [
          "drop"
        ],
        "parameters": [
          {
            "name": "route",
            "in": "query",
            "description": "route names to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "trip",
            "in": "query",
            "description": "trip IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "person",
            "in": "query",
            "description": "person IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "maximum number of results to return.  Use negative numbers to limit from the end of the result list.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "drop response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/drop"
              }
            },
            "headers": {
              "Count": {
                "description": "total number of matching results (how many you'd get if you didn't set `limit`)",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new drop",
        "operationId": "addDrop",
        "tags": [
          "drop"
        ],
        "parameters": [
          {
            "name": "drop",
            "in": "body",
            "description": "Drop to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newDrop"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "drop response",
            "schema": {
              "$ref": "#/definitions/drop"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/drop/{id}": {
      "get": {
        "summary": "Returns a drop based on a single ID, if the user has access to the drop",
        "operationId": "findDropById",
        "tags": [
          "drop"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of drop to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "drop response",
            "schema": {
              "$ref": "#/definitions/drop"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing drop",
        "operationId": "updateDrop",
        "tags": [
          "drop"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of drop to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "drop",
            "in": "body",
            "description": "Updated drop parameters (can optionally include 'id')",
            "required": true,
            "schema": {
              "$ref": "#/definitions/drop"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "drop response",
            "schema": {
              "$ref": "#/definitions/drop"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an existing drop",
        "operationId": "deleteDrop",
        "tags": [
          "drop"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of drop to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "delete successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/routes": {
      "get": {
        "summary": "Returns all routes from the system that the user has access to",
        "operationId": "findRoutes",
        "tags": [
          "route"
        ],
        "parameters": [
          {
            "name": "drop",
            "in": "query",
            "description": "drop IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "maximum number of results to return.  Use negative numbers to limit from the end of the result list.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "route response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/route"
              }
            },
            "headers": {
              "Count": {
                "description": "total number of matching results (how many you'd get if you didn't set `limit`)",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new route",
        "operationId": "addRoute",
        "tags": [
          "route"
        ],
        "parameters": [
          {
            "name": "route",
            "in": "body",
            "description": "Route to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newRoute"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "route response",
            "schema": {
              "$ref": "#/definitions/route"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/route/{name}": {
      "get": {
        "summary": "Returns a route based on a single ID, if the user has access to the route",
        "operationId": "findRouteById",
        "tags": [
          "route"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name of route to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "route response",
            "schema": {
              "$ref": "#/definitions/route"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing route",
        "operationId": "updateRoute",
        "tags": [
          "route"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name of route to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "route",
            "in": "body",
            "description": "Updated route parameters (can optionally include 'name')",
            "required": true,
            "schema": {
              "$ref": "#/definitions/route"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "route response",
            "schema": {
              "$ref": "#/definitions/route"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an existing route",
        "operationId": "deleteRoute",
        "tags": [
          "route"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name of route to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "delete successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/trips": {
      "get": {
        "summary": "Returns all trips from the system that the user has access to",
        "description": "Trips are ordered for decreasing cutoff time",
        "operationId": "findTrips",
        "tags": [
          "trip"
        ],
        "parameters": [
          {
            "name": "route",
            "in": "query",
            "description": "route names to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "drop",
            "in": "query",
            "description": "drop IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "cutoff-after",
            "in": "query",
            "description": "only return trips with cutoffs after or on this date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "cutoff-before",
            "in": "query",
            "description": "only return trips with cutoffs before this date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "maximum number of results to return.  Use negative numbers to limit from the end of the result list.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "trip response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/trip"
              }
            },
            "headers": {
              "Count": {
                "description": "total number of matching results (how many you'd get if you didn't set `limit`)",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/trip/{id}": {
      "get": {
        "summary": "Returns a trip based on a single ID, if the user has access to the trip",
        "operationId": "findTripById",
        "tags": [
          "trip"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of trip to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "trip response",
            "schema": {
              "$ref": "#/definitions/trip"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "summary": "Returns all products from the system that the user has access to",
        "operationId": "findProducts",
        "tags": [
          "product"
        ],
        "parameters": [
          {
            "name": "brand",
            "in": "query",
            "description": "brand IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "category",
            "in": "query",
            "description": "category IDs to filter by (for products directly associated with the categories)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "ancestor-category",
            "in": "query",
            "description": "category IDs to filter by (for products associated with the categories or their descendants)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "person",
            "in": "query",
            "description": "person IDs to filter by (selects their favorite products)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "maximum number of results to return.  Use negative numbers to limit from the end of the result list.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "product response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/product"
              }
            },
            "headers": {
              "Count": {
                "description": "total number of matching results (how many you'd get if you didn't set `limit`)",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/product/{code}": {
      "get": {
        "summary": "Returns a product based on a single ID, if the user has access to the product",
        "operationId": "findProductById",
        "tags": [
          "product"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "code of product to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "product response",
            "schema": {
              "$ref": "#/definitions/product"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "summary": "Returns all categories from the system",
        "operationId": "findCategories",
        "tags": [
          "category"
        ],
        "security": [],
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "category IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "product",
            "in": "query",
            "description": "product codes to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "maximum number of results to return.  Use negative numbers to limit from the end of the result list.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "category response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/category"
              }
            },
            "headers": {
              "Count": {
                "description": "total number of matching results (how many you'd get if you didn't set `limit`)",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/category/{id}": {
      "get": {
        "summary": "Returns a category based on a single ID",
        "operationId": "findCategoryById",
        "tags": [
          "category"
        ],
        "security": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of category to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "category response",
            "schema": {
              "$ref": "#/definitions/category"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "summary": "Returns all orders from the system that the user has access to",
        "operationId": "findOrders",
        "tags": [
          "order"
        ],
        "parameters": [
          {
            "name": "drop",
            "in": "query",
            "description": "drop IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "trip",
            "in": "query",
            "description": "trip IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "product",
            "in": "query",
            "description": "product codes to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "person",
            "in": "query",
            "description": "person IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "status",
            "in": "query",
            "description": "order-status string to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "cart",
                "placed",
                "shipped",
                "lost"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "maximum number of results to return.  Use negative numbers to limit from the end of the result list.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "order response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/order"
              }
            },
            "headers": {
              "Count": {
                "description": "total number of matching results (how many you'd get if you didn't set `limit`)",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/order/{id}": {
      "get": {
        "summary": "Returns a order based on a single ID",
        "operationId": "findOrderById",
        "tags": [
          "order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of order to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "order response",
            "schema": {
              "$ref": "#/definitions/order"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/order-lines": {
      "get": {
        "summary": "Returns all order-lines from the system that the user has access to",
        "operationId": "findOrderLines",
        "tags": [
          "order-line"
        ],
        "parameters": [
          {
            "name": "order",
            "in": "query",
            "description": "order IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "product",
            "in": "query",
            "description": "product codes to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "maximum number of results to return.  Use negative numbers to limit from the end of the result list.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "order-line response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/orderLine"
              }
            },
            "headers": {
              "Count": {
                "description": "total number of matching results (how many you'd get if you didn't set `limit`)",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/order-line/{id}": {
      "get": {
        "summary": "Returns a order-line based on a single ID",
        "operationId": "findOrderLineById",
        "tags": [
          "order-line"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of order-line to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "order-line response",
            "schema": {
              "$ref": "#/definitions/orderLine"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/account-entries": {
      "get": {
        "summary": "Returns all credits and debits from the system that the user has access to",
        "operationId": "findAccountEntries",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "person",
            "in": "query",
            "description": "person IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "date-after",
            "in": "query",
            "description": "only return entries with dates after this date (inclusive)",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "date-before",
            "in": "query",
            "description": "only return entries with dates before this date (exclusive)",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "maximum number of results to return.  Use negative numbers to limit from the end of the result list.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "account entry response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountEntry"
              }
            },
            "headers": {
              "Count": {
                "description": "total number of matching results (how many you'd get if you didn't set `limit`)",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/account-entry/{id}": {
      "get": {
        "summary": "Returns a credit or debit based on a single ID",
        "operationId": "findAccountEntryById",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of account entry to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "account entry response",
            "schema": {
              "$ref": "#/definitions/accountEntry"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/payment-methods": {
      "get": {
        "summary": "Returns all payment methods from the system that the user has access to",
        "description": "Methods associated with a person are ordered by decreasing preference.  The ordering between methods associated with different people is undefined.",
        "operationId": "findPayments",
        "tags": [
          "payment"
        ],
        "parameters": [
          {
            "name": "person",
            "in": "query",
            "description": "person IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "maximum number of results to return.  Use negative numbers to limit from the end of the result list.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "payment method response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/paymentMethod"
              }
            },
            "headers": {
              "Count": {
                "description": "total number of matching results (how many you'd get if you didn't set `limit`)",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new payment method",
        "operationId": "addPaymentMethod",
        "tags": [
          "payment"
        ],
        "parameters": [
          {
            "name": "payment-method",
            "in": "body",
            "description": "Payment method to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newPaymentMethod"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "payment method response",
            "schema": {
              "$ref": "#/definitions/paymentMethod"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/payment-method/{id}": {
      "get": {
        "summary": "Returns a payment method based on a single ID",
        "operationId": "findPaymentMethodById",
        "tags": [
          "payment"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of payment method to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment method response",
            "schema": {
              "$ref": "#/definitions/paymentMethod"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/addresses": {
      "get": {
        "summary": "Returns all addresses from the system that the user has access to",
        "description": "Addresses associated with a person are ordered by decreasing preference.  The ordering between addresses associated with different people is undefined.",
        "operationId": "findAddresses",
        "tags": [
          "address"
        ],
        "parameters": [
          {
            "name": "person",
            "in": "query",
            "description": "person IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "maximum number of results to return.  Use negative numbers to limit from the end of the result list.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "address response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/address"
              }
            },
            "headers": {
              "Count": {
                "description": "total number of matching results (how many you'd get if you didn't set `limit`)",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/address/{id}": {
      "get": {
        "summary": "Returns a address based on a single ID",
        "operationId": "findAddressById",
        "tags": [
          "address"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of address to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "address response",
            "schema": {
              "$ref": "#/definitions/address"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/people": {
      "get": {
        "summary": "Returns all people from the system that the user has access to",
        "operationId": "findPeople",
        "tags": [
          "person"
        ],
        "parameters": [
          {
            "name": "drop",
            "in": "query",
            "description": "drop IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "maximum number of results to return.  Use negative numbers to limit from the end of the result list.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "person response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/person"
              }
            },
            "headers": {
              "Count": {
                "description": "total number of matching results (how many you'd get if you didn't set `limit`)",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/person/{id}": {
      "get": {
        "summary": "Returns a person based on a single ID, if the user has access to the person",
        "operationId": "findPersonById",
        "tags": [
          "person"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of person to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "person response",
            "schema": {
              "$ref": "#/definitions/person"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/person": {
      "get": {
        "summary": "Returns the authenticated person (yourself)",
        "operationId": "findPersonByAuth",
        "tags": [
          "person"
        ],
        "responses": {
          "200": {
            "description": "person response",
            "schema": {
              "$ref": "#/definitions/person"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/session": {
      "get": {
        "summary": "Returns information about the current cookie-based session",
        "operationId": "findSessionByAuth",
        "tags": [
          "session"
        ],
        "security": [
          {
            "sessionCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "session response",
            "schema": {
              "$ref": "#/definitions/session"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "drop": {
      "description": "an order-delivery location",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "coordinators": {
          "description": "coordinators for this drop.  The first entry is the primary contact",
          "type": "array",
          "items": {
            "description": "person ID for this coordinator",
            "type": "integer",
            "format": "int32"
          }
        },
        "address": {
          "$ref": "#/definitions/address"
        },
        "geo": {
          "$ref": "#/definitions/geo"
        },
        "exclusivity": {
          "type": "string",
          "enum": [
            "open",
            "semi-open",
            "closed"
          ]
        },
        "parking": {
          "description": "parking location ownership for this drop",
          "type": "string",
          "enum": [
            null,
            "home",
            "business",
            "non-profit",
            "public"
          ]
        },
        "storage": {
          "description": "storage facilities available at this drop",
          "type": "array",
          "items": {
            "description": "facility name",
            "type": "string",
            "enum": [
              "dry",
              "refregerator",
              "freezer"
            ]
          }
        },
        "accept-cash-on-delivery": {
          "description": "does this drop accept COD orders?",
          "type": "boolean"
        },
        "fees": {
          "$fees": "#definitions/dropFees"
        },
        "members": {
          "description": "number of customers on this drop",
          "type": "integer",
          "format": "int32"
        },
        "order-frequency": {
          "description": "order counts for this drop over the past year",
          "type": "object",
          "properties": {
            "orders": {
              "description": "count of orders for this route-trip-drop",
              "type": "integer",
              "format": "int32"
            },
            "cutoff": {
              "description": "cutoff date for this route-trip",
              "type": "string",
              "format": "date"
            }
          }
        },
        "notes": {
          "description": "free-form Markdown notes for any drop information that doesn't fit into an existing field",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "geo",
        "exclusivity",
        "members"
      ]
    },
    "newDrop": {
      "$ref": "drop"
    },
    "dropFees": {
      "description": "additional costs for members receiving at a drop",
      "type": "object",
      "properties": {
        "medium": {
          "description": "payment medium (nothing, volunteer time, or a monetary payment)",
          "type": "string",
          "enum": [
            null,
            "volunteer",
            "payment"
          ]
        },
        "condition": {
          "description": "fee trigger (never, only when orders are held, or for every order)",
          "type": "string",
          "enum": [
            null,
            "held",
            "order"
          ]
        }
      },
      "required": [
        "type",
        "condition"
      ]
    },
    "route": {
      "description": "an order-delivery truck route",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "cutoff-frequency": {
          "description": "number of days between cutoffs",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "name",
        "cutoff-frequency"
      ]
    },
    "newRoute": {
      "$ref": "route"
    },
    "trip": {
      "description": "a truck delivering orders along a route",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "route": {
          "description": "name of the followed route",
          "type": "string"
        },
        "cutoff": {
          "description": "cutoff for placing orders on this trip",
          "type": "string",
          "format": "date-time"
        },
        "stops": {
          "description": "location and timing for each stop on the trip",
          "type": "array",
          "items": {
            "description": "a single stop",
            "$ref": "#/definitions/stop"
          }
        }
      },
      "required": [
        "id",
        "route",
        "cutoff",
        "stops"
      ]
    },
    "stop": {
      "description": "a trip stop or waypoint",
      "type": "object",
      "properties": {
        "drop": {
          "description": "drop ID for the stop",
          "type": "integer",
          "format": "int64"
        },
        "target-time": {
          "description": "planned stop time (fixed before the trip starts)",
          "type": "string",
          "format": "date-time"
        },
        "estimated-time": {
          "description": "estimated stop time (updated after the trip starts until the stop is reached)",
          "type": "string",
          "format": "date-time"
        },
        "time": {
          "description": "actual stop time (set after the stop is reached)",
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "drop",
        "target-time",
        "estimated-time"
      ]
    },
    "product": {
      "description": "a product available for sale",
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "description": "sentence-length product name",
          "type": "string"
        },
        "description": {
          "description": "long-form product description",
          "type": "string"
        },
        "brand": {
          "$ref": "#/definitions/brand"
        },
        "size": {
          "description": "size of the product (e.g. 12 oz., or 6x12 oz.)",
          "type": "string"
        },
        "price": {
          "#ref": "#/definitions/price"
        },
        "stock": {
          "description": "amount of stock available for purchase",
          "type": "integer",
          "format": "int32"
        },
        "favorites": {
          "description": "number of customers who've marked this product as a favorite",
          "type": "integer",
          "format": "int32"
        },
        "images": {
          "type": "array",
          "items": {
            "description": "URL for a picture of this product",
            "type": "string"
          }
        },
        "repackaged": {
          "description": "product codes for alternative packaging",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "code",
        "name",
        "size",
        "price"
      ]
    },
    "brand": {
      "description": "a brand which may be associated with several products",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "description": "homepage for the brand",
          "type": "string",
          "format": "url"
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "price": {
      "description": "product price information",
      "type": "object",
      "properties": {
        "dollars": {
          "description": "price of the product in dollars",
          "type": "number",
          "format": "float"
        },
        "per-pound": {
          "description": "whether the price is per-pound or per-unit",
          "type": "boolean"
        },
        "discount": {
          "description": "text for the discount (e.g. \"12%\", or \"$3.50\"",
          "type": "string"
        }
      },
      "required": [
        "dollars"
      ]
    },
    "category": {
      "description": "a category available for sale",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "A phrase naming the category.  This should be understandable (but not necessarily unique) without any further context.  It must be unique for categories sharing a given parent.",
          "type": "string"
        },
        "short-name": {
          "description": "A word or two naming the category.  A shortened version of the full name that drops any words already contained in the category's ancestors' short names.  This will be used in places where the ancestor short names are in close proximity (e.g. URL slugs) to avoid having the same word many times.",
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "description": "URL for a picture of this category",
            "type": "string"
          }
        },
        "parent": {
          "description": "category ID for the parent category",
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "order": {
      "description": "an order placed by a customer",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "customer": {
          "description": "customer making the order",
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "description": "order's lifecycle stage",
          "type": "string",
          "enum": [
            "cart",
            "placed",
            "shipped",
            "lost"
          ]
        },
        "drop": {
          "description": "drop the order is destined for (unset for UPS orders)",
          "type": "integer",
          "format": "int64"
        },
        "trip": {
          "description": "trip delivering the order (unset for UPS orders)",
          "type": "integer",
          "format": "int64"
        },
        "address": {
          "description": "UPS delivery location (unset for truck orders)",
          "$ref": "#/definitions/address"
        }
      },
      "required": [
        "id",
        "customer",
        "status"
      ]
    },
    "orderLine": {
      "description": "a per-product entry in an order",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "order": {
          "description": "order that the order-line belongs to",
          "type": "integer",
          "format": "int64"
        },
        "product": {
          "description": "product code that is being ordered",
          "type": "string"
        },
        "quantity-ordered": {
          "description": "number of product instances requested",
          "type": "integer",
          "format": "int32"
        },
        "quantity-shipped": {
          "description": "number of product instances delivered",
          "type": "integer",
          "format": "int32"
        },
        "weight": {
          "description": "weight of the shipped products in pounds (estimated until picking time)",
          "type": "integer",
          "format": "float"
        },
        "price": {
          "description": "per-product price (currently locked in when you place the order)",
          "$ref": "#/definitions/price"
        }
      },
      "required": [
        "id",
        "order",
        "product",
        "quantity-ordered",
        "weight"
      ]
    },
    "accountEntry": {
      "description": "an entry in a person's acount",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "person": {
          "description": "person associated with the account",
          "type": "integer",
          "format": "int64"
        },
        "amount": {
          "description": "dollar value for the entry (positive for credits like customer payments, negative for debits like order charges)",
          "type": "number",
          "format": "float"
        },
        "date": {
          "description": "when the entry was added",
          "type": "string",
          "format": "date"
        },
        "notes": {
          "description": "a line of Markdown identifying the entry (e.g. \"charge for order 123\" or \"payed with card ending in 0123\").",
          "type": "string"
        }
      },
      "required": [
        "id",
        "person",
        "amount",
        "date"
      ]
    },
    "creditCard": {
      "description": "a credit card (one of our supported payment methods)",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "description": "string identifying this payment model",
          "type": "string",
          "enum": [
            "credit-card"
          ]
        },
        "person": {
          "description": "person associated with this credit card",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "billing name (which may differ from the associated person's name)",
          "type": "string"
        },
        "address": {
          "description": "billing address associated with this credit card",
          "type": "integer",
          "format": "int64"
        },
        "last-four": {
          "description": "last four digits of the card number for identification",
          "type": "integer",
          "format": "int32"
        },
        "expiration": {
          "description": "expiration date.  We only use the month and year; the day will always be '01'.",
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "id",
        "type",
        "person",
        "name",
        "address",
        "last-four",
        "expiration"
      ]
    },
    "newCreditCard": {
      "description": "Azure does not store much credit card information internally (we use an external card processor), but we do need all of the information for the initial upload so we can pass it along to the external processor.",
      "description": "a credit card (one of our supported payment methods)",
      "type": "object",
      "properties": {
        "type": {
          "description": "string identifying this payment model",
          "type": "string",
          "enum": [
            "credit-card"
          ]
        },
        "person": {
          "description": "person associated with this credit card",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "billing name (which may differ from the associated person's name)",
          "type": "string"
        },
        "address": {
          "description": "billing address associated with this credit card",
          "type": "integer",
          "format": "int64"
        },
        "number": {
          "description": "card number",
          "type": "integer",
          "format": "int32"
        },
        "security-code": {
          "description": "security code (also known as the verification value)",
          "type": "integer",
          "format": "int32"
        },
        "expiration": {
          "description": "expiration date.  We only use the month and year and ignore the day (which you should set to '01').",
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "type",
        "person",
        "name",
        "address",
        "number",
        "security-code",
        "expiration"
      ]
    },
    "paymentMethod": {
      "anyOf": [
        "creditCard"
      ]
    },
    "newPaymentMethod": {
      "anyOf": [
        "newCreditCard"
      ]
    },
    "person": {
      "description": "a person (customer, vendor, employee, ...)",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "address": {
      "description": "an address following the convention of http://microformats.org/wiki/hcard",
      "type": "object",
      "properties": {
        "post-office-box": {
          "type": "string"
        },
        "extended-address": {
          "type": "string"
        },
        "street-address": {
          "type": "string"
        },
        "locality":{
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "postal-code": {
          "type": "string"
        },
        "country-name": {
          "type": "string"
        }
      },
      "required": [
        "locality",
        "region",
        "country-name"
      ]
    },
    "geo": {
      "description": "a geographical coordinate",
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "float"
        },
        "longitude": {
          "type": "number",
          "format": "float"
        }
      },
      "required": [
        "latitude",
        "longitude"
      ]
    },
    "session": {
      "description": "session cookie information",
      "type": "object",
      "properties": {
        "person": {
          "description": "person ID for the session owner (unset for anonymous sessions)",
          "type": "integer",
          "format": "int64"
        },
        "expires": {
          "description": "current expiration date for this session (http://tools.ietf.org/html/rfc6265#section-5.3, covering both Max-Age and Expires representations, unset if the session expires at browser-close)",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "errorModel": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}
